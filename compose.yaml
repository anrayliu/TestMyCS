services:
  app:
    build:
      context: .
      dockerfile: ./docker/app/Dockerfile
    ports:
    - ${APP_PORT}:${APP_PORT}
    volumes:
      - dbdata:/var/lib/postgresql/data
    env_file: .env
    depends_on:
      dbinit:
        condition: service_completed_successfully
    restart: on-failure
    networks:
      - backend_network

  db:
    image: postgres:17-alpine
    ports:
    - ${DB_PORT}:${DB_PORT}
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}" ]
      interval: 20s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: on-failure
    networks:
      - backend_network

  dbinit:
    build:
      context: .
      dockerfile: ./docker/initdb/Dockerfile
    env_file: .env
    depends_on:
      db:
        condition: service_healthy
    restart: on-failure
    networks:
      - backend_network

  tunnel:
    image: cloudflare/cloudflared
    command: tunnel --no-autoupdate run --token ${CLOUDFLARE_TOKEN}
    environment:
      TUNNEL_TOKEN: ${CLOUDFLARE_TOKEN}
    depends_on:
      - proxy
    networks:
      - proxy_network

  proxy:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./static/:/app-static/
    depends_on:
      - app
    networks:
      - proxy_network
      - backend_network

volumes:
  dbdata:

networks:
  backend_network:
  proxy_network:
